# -*- coding: utf-8 -*-
"""Zomato Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BtlGOORaJmUhVc4D3uewt33XixS1w4Hi
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/read.csv')

df.head()

df.shape

df.isnull().sum()

df.dtypes

"""# Additional outlet count"""

df['Additional_outlet_count'] = df['Additional_outlet_count'].str.replace('more outlet in Mumbai','')
df['Additional_outlet_count'] = df['Additional_outlet_count'].str.replace('more outlets in Mumbai','')
df['Additional_outlet_count']

df.head()

df['Additional_outlet_count'] = df['Additional_outlet_count'].astype(float)
df['Additional_outlet_count'] = df['Additional_outlet_count'].fillna(df['Additional_outlet_count'].mean())
df['Additional_outlet_count'] = df['Additional_outlet_count'].astype(int)
df.head()

"""# Cost"""

df['Cost_for_two'] = df['Cost_for_two'].str.replace(',', '')
df['Cost_for_two'] = df['Cost_for_two'].str.replace('₹', '')
df['Cost_for_two']

df.head()

"""# Delivery Time and Cost"""

df.rename(columns={'Delivery_Time_min_order':'Delivery_Time'},inplace=True)

df['Delivery_Time'] = df['Delivery_Time'].str.replace('min','')
df['Delivery_Time'][4]

df[['Delivery_Time','Delivery_cost']] = df['Delivery_Time'].str.split('                                                                              ·                                                                         ',expand=True)
df.head()

"""### Delivery Time"""

df['Delivery_Time'] = df['Delivery_Time'].astype(float)
df['Delivery_Time'] = df['Delivery_Time'].fillna(df['Delivery_Time'].mean())
df['Delivery_Time'] = df['Delivery_Time'].astype(int)
df.head()

"""### Delivery Cost"""

df['Delivery_cost'][4]

def handle_del_cost(value):
  value = str(value)
  if '    Rs. ' in value:
    value = value.replace('    Rs. ','')
    return value
  else:
    return value
df['Delivery_cost'] = df['Delivery_cost'].apply(handle_del_cost)
df['Delivery_cost'].head(10)

df['Delivery_cost'] = df['Delivery_cost'].astype(float)
df['Delivery_cost'] = df['Delivery_cost'].fillna(df['Delivery_cost'].mean())
df['Delivery_cost'] = df['Delivery_cost'].astype(int)
df.head()

"""**Rating**"""

new = df["Rating_votes"].str.split(" ", n = 1, expand = True)

df["Rating"]= new[0]

df["votes"]= new[1]

del df['Rating_votes']
df

df['Rating'].unique()

df['Rating'] = np.where((df.Rating == '-'),'0',df.Rating)

df['Rating'].unique()

df['Rating'] = np.where((df.Rating == 'NEW'),'0',df.Rating)

df['Rating'] = np.where((df.Rating == 'Opening'),'0',df.Rating)

df['Rating'].unique()

""" Votes"""

df['votes'] = df['votes'].str.replace('votes','')
df['votes']

df['votes'].head(10)

def handlevot(value):
    value=str(value)
    if(value=='None' or value=='Soon'):
        value = '0'
        return value
    else:
        return value
df['votes'] = df['votes'].apply(handlevot)

df.votes = df.votes.astype(int)
mean_vot = df.votes.mean()
mean_vot = int(mean_vot)
def meanvot(value):
    if(value==0):
        value = mean_vot
        return value
    else:
        return value
df['votes'] = df['votes'].apply(meanvot)
df['votes'].head(10)

df.head()

""" Call and View Menu"""

df['Call'].unique()

del df['Call']

df['View_Menu'].unique()

del df['View_Menu']

df.head()

"""Home Delivery"""

df['Home_Delivery'] = df['Home_Delivery'].astype(int)
df['Home_Delivery']

df.head()

"""## Cuisines"""

df['Cuisines'].isna().sum()

df['Cuisines'] = df['Cuisines'].fillna("")
df['Cuisine_count'] = df['Cuisines'].apply(lambda n:len(n.split(',')))
df[['Cuisines','Cuisine_count']]

"""## Features"""

df['Features'].isna().sum()

df['Features'] = df['Features'].fillna("")
df['Feature_count'] = df['Features'].apply(lambda n:len(n.split(',')))
df[['Features','Feature_count']]

"""## Restaurant type"""

df['Restaurant_Type'].isna().sum()

df['Restaurant_Type'] = df['Restaurant_Type'].fillna("")
df['Rest_type_count'] = df['Restaurant_Type'].apply(lambda n:len(n.split(',')))
df[['Restaurant_Type','Rest_type_count']]

df['Restaurant_Type'].value_counts()

Type = df['Restaurant_Type'].value_counts(ascending=False)
Type_50 = Type[Type<50]

def handletype(value):
  value=str(value)
  if value in Type_50:
    return 'Others'
  else:
    return value

df['Restaurant_Type'] = df['Restaurant_Type'].apply(handletype)
df['Restaurant_Type'].value_counts()

df.head()

"""# Data Visualization

Most Popular Restaurant chain
"""

plt.figure(figsize=(10,7))
chains=df['Restaurant_Name'].value_counts()[:20]
sns.barplot(x=chains,y=chains.index,palette='deep')
plt.title("Most famous restaurants chains in Mumbai",fontsize =20, weight = 'bold')
plt.xlabel("Number of outlets",fontsize =16)

"""Most Popular restaurants"""

plt.figure(figsize=(7,7))
rest=df['Restaurant_Type'].value_counts()[:20]
sns.barplot(rest,rest.index)
plt.title("Restaurant types")
plt.xlabel("count")

"""Popular Cuisines"""

plt.figure(figsize=(7,7))
cuisines=df['Cuisines'].value_counts()[:10]
sns.barplot(cuisines,cuisines.index)
plt.xlabel('Count')
plt.title("Most popular cuisines")

"""Locations with most restaurants"""

plt.figure(figsize=(7,7))
Rest_locations=df['Restaurant_Location'].value_counts()[:20]
sns.barplot(Rest_locations,Rest_locations.index,palette="rocket")

"""Average cost for two"""

plt.figure(figsize = (12,8))
df['Cost_for_two'].value_counts()[:20].plot(kind = 'pie')
plt.title('Average cost for 2 people', fontsize =20, weight = 'bold')
plt.show()

"""Average Rating"""

df['Rating'] = df['Rating'].astype(float)

df.Rating.hist(color='#68cbfc')
plt.axvline(x= df.Rating.mean(),ls='--',color='#091a4a')
plt.title('Average Rating for Mumbai Restaurants',weight='bold')
plt.xlabel('Rating')
plt.ylabel('No of Restaurants')
print(df.Rating.mean())

"""Rating"""

Rating = [((df['Rating']>2)&(df['Rating']<3)).sum(),
         ((df['Rating']>3)&(df['Rating']<4)).sum(),
         (df['Rating']>4).sum()]

name = ['2<Rating<3', '3<Rating<4', 'Rating>4']
plt.pie(Rating, labels=name, autopct='%0.f%%')

"""Rating vs Restaurant Type"""

plt.figure(figsize=(14,8))
sns.boxplot(x='Restaurant_Type',y='Rating',data=df,palette='inferno')
plt.xticks(rotation='90')

"""# Building The Model"""

from sklearn.model_selection import train_test_split

X = df.drop(columns=['Cuisines','Features','Operational_hours','Restaurant_Location','Restaurant_Name',	'Restaurant_Type','Rating'])
Y = df['Rating']

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

from sklearn.metrics import r2_score

"""# Decision Tree"""

from sklearn.tree import DecisionTreeRegressor

DT = DecisionTreeRegressor()

DT.fit(X_train,Y_train)

y_pred1 = DT.predict(X_test)
r2_score(Y_test,y_pred1)

"""## Random Forest"""

from sklearn.ensemble import RandomForestRegressor

RF = RandomForestRegressor(n_estimators=100, random_state=0)

RF.fit(X_train,Y_train)

Y_predict = RF.predict(X_test)
r2_score(Y_test,Y_predict)

"""## Actual vs Predicted"""

plt.figure(figsize=(9,4))
plt.scatter(Y_test,Y_predict)
plt.title('Actual vs Predicted')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.show()

df.head()

d1 = df.drop(columns=['Cuisines','Features','Operational_hours','Restaurant_Location','Restaurant_Name','Restaurant_Type'])
d1.head()

d1.to_csv(r'C:\project\zomato_df.csv')

